<?php 

function thoe_import_menu() {
  $items = array();
  
  $items['thoe/import'] = array( 
      'title' => 'Data crawler', 
      'description' => 'Crawl data',
      'page callback' => 'thoe_import_main',
      'access callback' => TRUE
  );
  
  return $items;
}

function thoe_import_main() {
  print "test";
}

function thoe_import_format_content($content,$style) {
  
  switch ($style["name"]) {
  	case "all_in_one":
  	  $parts = explode(":",$content);
  	  $time = $parts[0];
  	  $time_data = thoe_import_time_define($time);
  	  
  	  // get time and abbrevation
  	  $time = $time_data["time"];
  	  $abbrevation = $time_data["abbrevation"];
  	  
  	  $time_type = "big_date";
  	  $times = array();
  	  $times[] = array(
  	      "time" => $time_data["time"],
  	      "abbrevation" =>  $time_data["abbrevation"],
  	      "ago_after" => "after",
  	  );
  	  
//   	  drush_print("TIME");
//   	  drush_print("*******************");
//   	  drush_print($time. " ". $abbrevation);
//   	  drush_print(" ");
  	  
  	  // get title
  	  $title = $parts[1];
  	  
  	  // get description
  	  array_shift($parts);
  	  array_shift($parts);
  	  if(count($parts)>0) {
  	    $desc = implode(".",$parts);
  	  }
  	  else {
  	    $len = strlen(strip_tags($title));
  	    if($len>50) {
  	      $new_title = truncate_utf8(strip_tags($title),50,true,false);
  	      $new_desc = str_replace($new_title,"",strip_tags($title));
  	      
  	      $title = $new_title;
  	      $desc = $new_desc;
  	    }
  	  }
  	  
  	  $clean_title = strip_tags($title);
  	  
  	  $node_exists = thoe_import_node_exists($clean_title);
  	  if($node_exists) {
  	    return;
  	  }
  	  
  	  break;
  	  
  	  case "all_in_one_natural":
  	    $parts = explode(" Ma ",$content);
  	    $time = $parts[0];
  	    $time_data = thoe_import_time_define_natural($time);
  	    	
  	    // get time and abbrevation
  	    $time = $time_data["time"];
  	    $abbrevation = $time_data["abbrevation"];
  	    	
  	    $time_type = "big_date";
  	    $times = array();
  	    $times[] = array(
  	        "time" => $time_data["time"],
  	        "abbrevation" =>  $time_data["abbrevation"],
  	        "ago_after" => "ago",
  	    );
  	    	
  	      	  drush_print("TIME");
  	      	  drush_print("*******************");
  	      	  drush_print($time. " ". $abbrevation);
  	      	  drush_print(" ");
  	    	
  	    // get title
  	    $title = $parts[1];
  	    	
  	    // get description
  	    array_shift($parts);
  	    array_shift($parts);
  	    if(count($parts)>0) {
  	      $desc = implode(".",$parts);
  	    }
  	    else {
  	      $len = strlen(strip_tags($title));
  	      if($len>50) {
  	        $new_title = truncate_utf8(strip_tags($title),50,true,false);
  	        $new_desc = str_replace($new_title,"",strip_tags($title));
  	         
  	        $title = $new_title;
  	        $desc = $new_desc;
  	      }
  	    }
  	    $title = str_replace("–","",$title);
  	    $title = str_replace("– ","",$title);
  	    $title = str_replace("- ","",$title);
  	    $title = trim($title);
  	    
  	    $clean_title = strip_tags($title);
  	    $node_exists = thoe_import_node_exists($clean_title);
  	    if($node_exists) {
  	      return;
  	    }
  	    	
  	    break;
  	    
  	    case "all_in_one_prehistory":
  	      $parts = explode(":",$content);
  	      $time = $parts[0];
  	      $time_data = thoe_import_time_define_prehistory($time);
  	    
  	      // get time and abbrevation
  	      $time = $time_data["time"];
  	      $abbrevation = $time_data["abbrevation"];
  	    
  	      $time_type = "big_date";
  	      $times = array();
  	      $times[] = array(
  	          "time" => $time_data["time"],
  	          "abbrevation" =>  $time_data["abbrevation"],
  	          "ago_after" => "ago",
  	      );
  	    
  	      drush_print("TIME");
  	      drush_print("*******************");
  	      drush_print($time. " ". $abbrevation);
  	      drush_print(" ");
  	    
  	      // get title
  	      $title = $parts[1];
  	      $title = preg_replace("/\[.*\]/","",$title);
  	    
  	      // get description
  	      array_shift($parts);
  	      array_shift($parts);
  	      if(count($parts)>0) {
  	        $desc = implode(".",$parts);
  	      }
  	      else {
  	        $len = strlen(strip_tags($title));
  	        if($len>50) {
  	          $new_title = truncate_utf8(strip_tags($title),50,true,false);
  	          $new_desc = str_replace($new_title,"",strip_tags($title));
  	    
  	          $title = $new_title;
  	          $desc = $new_desc;
  	        }
  	      }
  	      $title = str_replace("–","",$title);
  	      $title = str_replace("– ","",$title);
  	      $title = str_replace("- ","",$title);
  	      $title = trim($title);
  	       
  	      $clean_title = strip_tags($title);
  	      $node_exists = thoe_import_node_exists($clean_title);
  	      if($node_exists) {
  	        return;
  	      }
  	    
  	      break;
  	      
	      case "10_5_bc":
	        $time_data = thoe_import_time_define_10_5_bc($content,$style);
	         
	        // get time and abbrevation
	        $time = $time_data["time"];
	        $abbrevation = $time_data["abbrevation"];
	         
	        $time_type = "normal";
	        $times = array();
  	      $times[] = array(
  	          "year" => $time_data["time"],
  	          "ad_bc" =>  "bc",
  	      );
	        
	        $tag = $time_data["tag"];
	         
	        drush_print("TIME");
	        drush_print("*******************");
	        drush_print($time. " ". $abbrevation);
	        drush_print(" ");
	         
	        // get title
	        $title = $time_data["title"];
	        
	        $title = preg_replace("/\[.*\]/","",$title);
	         
	        // get description


	          $len = strlen($title);
	          if($len>50) {
	            $new_title = truncate_utf8(strip_tags($title),50,true,false);
	            $new_desc = str_replace($new_title,"",strip_tags($title));
	             
	            $title = $new_title;
	            $desc = $new_desc;
	          }

	        $title = trim($title);
	      
	        $clean_title = $title;
	        $node_exists = thoe_import_node_exists($clean_title);
	        if($node_exists) {
	          return;
	        }
	         
	        break;
	        
      case "40_19_c":
      case "1790_740_bc":
        $time_data = thoe_import_time_define_10_5_bc($content,$style);
      
        // get time and abbrevation
        $time = $time_data["time"];
        $abbrevation = $time_data["abbrevation"];
      
        $time_type = "normal";
        $times = array();
        $times[] = array(
            "year" => $time_data["time"],
            "ad_bc" =>  "bc",
            "month" => $time_data["month"],
            "day" => $time_data["day"],
        );
         
        $tag = $time_data["tag"];
        
        $tag = (strlen($tag)>50) ? "" : $tag;
      
        drush_print("TIME");
        drush_print("*******************");
        drush_print($time. " ". $abbrevation);
        drush_print(" ");
      
        // get title
        $title = $time_data["title"];
         
        $title = preg_replace("/\[.*\]/","",$title);
      
        // get description
      
      
        $len = strlen($title);
        if($len>50) {
          $new_title = truncate_utf8(strip_tags($title),50,true,false);
          $new_desc = str_replace($new_title,"",strip_tags($title));
      
          $title = $new_title;
          $desc = $new_desc;
        }
      
        $title = trim($title);
         
        $clean_title = $title;
        $node_exists = thoe_import_node_exists($clean_title);
        if($node_exists) {
          return;
        }
      
        break;
  	
  }
  
  $clean_desc = $desc;
  //   	    drush_print($clean_title);
  //get categories
  $categories = opencalais_thoe_get_tags($clean_title . " " . $clean_desc);
  
  // get image
  $image_url = thoe_import_get_image($clean_title);
  //   	    $image_url = "";
  
  // get the videos
  $videos = thoe_youtube_api_search($clean_title);
  
  // get the books
  $books = thoe_import_get_google_books($clean_title);
  
  $data = array(
      "title" => $clean_title,
      "description" => $clean_desc,
      "books" => $books,
      "videos" => $videos,
      "image" => $image_url,
      "categories" => $categories,
      "time" => array(
          "type" => $time_type,
          "values" => $times
      ),
      "tis" => $time_data["tis"],
      "extra_tag" => $tag
  );
  
//   thoe_import_add_node($data);  
  
  drush_print("TITLE");
  drush_print("*******************");
  drush_print($title);
  drush_print(" ");
  
  drush_print("DESCRIPTION");
  drush_print("*******************");
  drush_print($desc);
  drush_print(" ");
  
//   drush_print("BOOKS");
//   drush_print("*******************");
//   //   	      	  print_r($books);
//   drush_print(" ");
  
//   drush_print("VIDEOS");
//   drush_print("*******************");
//   print_r($videos);
//   drush_print(" ");
  
//   drush_print("IMAGE");
//   drush_print("*******************");
//   print_r($image_url);
//   drush_print(" ");
  
//   drush_print("CATEGORIES");
//   drush_print("*******************");
//   print_r($categories);
//   drush_print(" ");
  

  
}

function thoe_import_add_node($data,$lang = "en") {
  $node = new stdClass();
  $node->type = "node";
  $node->language = $lang;
  node_object_prepare($node);
  $node->title = $data["title"];
  
  $body_language = thoe_import_lang_code('body',$node->language);
  
  $node->body[$body_language][0]['value'] = $data["description"];
  $node->body[$body_language][0]['summary'] = text_summary($data["description"]);
  $node->body[$body_language][0]['format'] = "full_html";
  
  $node->uid = 1;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;

  // set tags
  $node = thoe_import_add_tags($data,$node);
  
  // set extra tags
  if($data["extra_tag"]!=="") {
    $node = thoe_import_add_extra_tag($data["extra_tag"],$node,$vid=4);
  }
  
  // set weight
  $node = thoe_import_set_weight($data,$node);

  // set videos
  $node = thoe_import_add_video($data,$node);

  // set books
  $node = thoe_import_add_books($data,$node);

  // set image
  $node = thoe_import_add_image($data,$node);
  
  // set date
  $tis_language = thoe_import_lang_code('field_tis',$node->language);
  $node->field_tis[$tis_language][0]['value'] = $data["tis"];
  node_save($node);
  thoe_import_add_date($data,$node);
}

function thoe_import_set_weight($data,$node) {
  $num_of_terms = count($node->field_free_tagging['und']);
  $node->field_weight["und"][0]["value"] = $num_of_terms;
  return $node;
}

// not using this
function thoe_import_get_goodreads_books($title) {
  $title = strip_tags($title);
  $results = goodreads_book_search($title,'title',1,1);
  $best_books_all = $results['results']['work'];
  $best_books = array_slice($best_books_all,0,5);
  
  $results = array();
  foreach ($best_books as $book) {
  	$results[] = $book['best_book'];
  }
  
  return $results;
}

function thoe_import_get_google_books($title,$lang="en") {
  $title = strip_tags($title);
  // for more info: https://developers.google.com/books/docs/v1/using#PerformingSearch
  $google_api_key = "AIzaSyBHBN9EvpOH2Cpbup_ktQNXAzj6-8qe0ZI";
  $cx = "018281177569452009831:a94jredrj7a";
  $end_url = "https://www.googleapis.com/books/v1/volumes";
  $data = array(
      "q" => urlencode(strip_tags($title)),
      "langRestrict" => $lang,
      "key" => $google_api_key,
      "maxResults" => 5
  );
  
  $full_url = url($end_url, array('query' => $data));
  $google_result = drupal_http_request($full_url);
  $books = array();
  if ($google_result->code==200) {
    $data = json_decode($google_result->data);
    if(count($data->items)>0) {
      foreach ($data->items as $item) {
        $books[] = $item;
      }
    }
  }
  else {
    return false;
  }
  return $books;
}

function thoe_import_time_define($time) {
  $abbrevation=="";
  $time = str_replace("ca. ","",$time);
  $time = preg_replace("/\(.*\)/","",$time);
  $big_bang = 13.8*pow(10,9);
  $seconds_in_a_year = 3.154*pow(10,7); 
  
  if($time == "0 seconds ") {
    $time = 0;
    $abbrevation = "zero";
    $tis = $big_bang*$seconds_in_a_year*(-1);
  }
  
  // check if million years
  preg_match('/(.*) million year/', $time, $matches, PREG_OFFSET_CAPTURE);
  if($matches[0][0] && $abbrevation=="") {
    $time = $matches[1][0];
    $abbrevation = "ma";
    $tis = $time*pow(10,6)*$seconds_in_a_year - $big_bang*$seconds_in_a_year;
  }
  
  // check if billion years
  preg_match('/(.*) billion year/', $time, $matches, PREG_OFFSET_CAPTURE);
  if($matches[0][0] && $abbrevation=="") {
    $time = $matches[1][0];
    $abbrevation = "ga";
    $tis = $time*pow(10,9)*$seconds_in_a_year - $big_bang*$seconds_in_a_year;
  }
  
  // check if it's a neg abbrevation time
  preg_match('/(.*)<sup>−(.*)<\/sup> seconds/', $time, $matches, PREG_OFFSET_CAPTURE);
  if($matches[1][0] && $matches[2][0])
  {
    $abbrevation = "neg";
    $time = $matches[2][0];
    $tis = $big_bang*$seconds_in_a_year*(-1);
  }
  
  // check if seconds
  preg_match('/(.*) second/', $time, $matches, PREG_OFFSET_CAPTURE);
  if($matches[0][0] && $abbrevation=="") {
    $time = $matches[1][0];
    $abbrevation = "sec";
    $tis = $time - $big_bang*$seconds_in_a_year;
  }
  
  // check if minutes
  preg_match('/(.*) minute/', $time, $matches, PREG_OFFSET_CAPTURE);
  if($matches[0][0] && $abbrevation=="") {
    $time = $matches[1][0];
    $abbrevation = "min";
    $tis = $time*60 - $big_bang*$seconds_in_a_year;
  }
  
  // check if years
  preg_match('/(.*) year/', $time, $matches, PREG_OFFSET_CAPTURE);
  if($matches[0][0] && $abbrevation=="") {
    $time = $matches[1][0];
    $time = str_replace(",","",$time);
    $million = strpos($time,"million");
    $billion = strpos($time,"billion");
    if(!$million && !$billion)
    {
      if($time % 1000 == 0) {
        $time = $time/1000;
        $abbrevation = "ka";
      }
      else {
        $abbrevation = "ye";
      }
    }
    $tis = $time*$seconds_in_a_year - $big_bang*$seconds_in_a_year;
  }
  
  return array("time"=>$time,"abbrevation"=>$abbrevation,"tis"=>$tis);
}

function thoe_import_time_define_natural($time) {
  $abbrevation=="";
  $time = str_replace("c.","",$time);
  
  $minus_plus = explode(" ± ",$time);
  $time = $minus_plus[0];
  
  $range = explode("–",$time);
  $time = $range[0];
  
  $time = str_replace(",","",$time);
  $time = preg_replace("/\(.*\)/","",$time);
  $big_bang = 13.8*pow(10,9);
  $seconds_in_a_year = 3.154*pow(10,7);

  // all is million years
  $abbrevation = "ma";
  $tis = $seconds_in_a_year*$time*pow(10,6)*(-1);

  return array("time"=>$time,"abbrevation"=>$abbrevation,"tis"=>$tis);
}

function thoe_import_time_define_prehistory($time) {
  $time = strip_tags($time);
  $time = str_replace(" years ago","",$time);
  $time = trim($time);
  $time = preg_replace("/\(.*\)/","",$time);

  $range = explode("–",$time);
  $time = $range[0];

  $time = str_replace(",","",$time);
  $big_bang = 13.8*pow(10,9);
  $seconds_in_a_year = 3.154*pow(10,7);

  // all is years
  $abbrevation = "ye";
  $tis = $seconds_in_a_year*($time-2000)*(-1);

  return array("time"=>$time,"abbrevation"=>$abbrevation,"tis"=>$tis);
}

function thoe_import_time_define_10_5_bc($time,$style) {
$month_pattern = "/(\d+) BC—(Jan(?:uary)|Feb(?:ruary)|Mar(?:ch)|Apr(?:il)|May|Jun(?:e)|Jul(?:y)|Aug(?:ust)|Sep(?:tember)|Oct(?:ober)|Nov(?:ember)|Dec(?:ember)) (\d{1,2})—/i";
$month_pattern2 = "/(Jan(?:uary)|Feb(?:ruary)|Mar(?:ch)|Apr(?:il)|May|Jun(?:e)|Jul(?:y)|Aug(?:ust)|Sep(?:tember)|Oct(?:ober)|Nov(?:ember)|Dec(?:ember)) (\d{1,2}), (\d+) BC/i";
$month_pattern3 = "/(Jan(?:uary)|Feb(?:ruary)|Mar(?:ch)|Apr(?:il)|May|Jun(?:e)|Jul(?:y)|Aug(?:ust)|Sep(?:tember)|Oct(?:ober)|Nov(?:ember)|Dec(?:ember)) (\d{1,2}) (\d+) BC/i";
$month_pattern4 = "/c\. (\d+) BC \((Jan(?:uary)|Feb(?:ruary)|Mar(?:ch)|Apr(?:il)|May|Jun(?:e)|Jul(?:y)|Aug(?:ust)|Sep(?:tember)|Oct(?:ober)|Nov(?:ember)|Dec(?:ember)) (\d{1,2})\)/i";
$month_pattern5 = "/(\d+) BC—(Jan(?:uary)|Feb(?:ruary)|Mar(?:ch)|Apr(?:il)|May|Jun(?:e)|Jul(?:y)|Aug(?:ust)|Sep(?:tember)|Oct(?:ober)|Nov(?:ember)|Dec(?:ember)) (\d{1,2})/i";
$month_pattern6 = "/(\d+) BC,(Jan(?:uary)|Feb(?:ruary)|Mar(?:ch)|Apr(?:il)|May|Jun(?:e)|Jul(?:y)|Aug(?:ust)|Sep(?:tember)|Oct(?:ober)|Nov(?:ember)|Dec(?:ember)) (\d{1,2})—/i";
$regexps = array(
	$month_pattern,
	$month_pattern2,
	$month_pattern3,
	$month_pattern4,
	$month_pattern5,
	$month_pattern6,
	"/(\d+) BC \(or (\d+) BC\)/i",
	"/c\. (\d+) to (\d+) BC/i",
	"/(\d+) to (\d+) BC/i",
	"/c\. (\d{2},\d+) BC:/i",
	"/c\. (\d{1},\d+) BC:/i",
	"/c\. (\d+) BC:/i",
	"/(.*)±(.*) BC:/i",
	"/c\. (\d+) BC–(\d+) BC:/i",
	"/(\d+) BC–(\d+) BC:/i",
	"/c\. (.*) BC – (.*) BC/i",
	"/c\. (.*) – (.*) BC/i",
	"/\((\d+)–(\d+) BC\)/i",
	"/\(c\. (.*) BC – (.*) BC\)/i",
	"/c\. (.*) BC–(.*) BC/i",
	"/c\. (\d+)–(\d+) BC/i",
	"/c\. (\d)th millennium BC/i",
	"/\(c\. (.*) BC:\)/i",
	"/(\d+)–(\d+) BC/i",
	"/c. (\d+) BC—(\d+) BC/i",
	"/c. (\d+) BC—/i",
	"/(\d{2},\d+) BC/i",
	"/(\d{1},\d+) BC/i",
	"/(\d+)-(\d+) BC/i",
	"/(\d+)-(\d+) \(Middle Chronology\)/i",
	"/c. (\d+) BC — /i",
	"/(\d+) BC – (\d+) BC:/i",
	"/(\d+) BC–(\d+) BC—/i",
	"/c.(\d+) BC-/i",
	"/c. (\d+) BC -/i",
	"/c.(\d+) BC— /i",
	"/(\d+) BC — /i",
	"/(\d+) BC:/i",
	"/(\d+) BC/i",
	"/(\d+) B.C./i"
	);

    $day = 1;
    $month = 1;
    $value = trim(strip_tags($value));
	  $value = ltrim($value,".");
	
    $found = false;
    foreach ($regexps as $regexp) {
      if(!$found) {
        $exists = preg_match($regexp, $value, $matches, PREG_OFFSET_CAPTURE);
        if($exists) {

          $date = $matches[1][0];
          
          if($regexp==$month_pattern2 || $regexp==$month_pattern3) {
            $month = $matches[1][0];
            $month_date = date_parse($month);
            $month = $month_date["month"];
            	
            $day = $matches[2][0];
            	
            $date = $matches[3][0];
          }
          else if($regexp==$month_pattern || $regexp==$month_pattern4  || $regexp==$month_pattern5 || $regexp==$month_pattern6) {
            $month = $matches[2][0];
            $month_date = date_parse($month);
            $month = $month_date["month"];
            	
            $day = $matches[3][0];
          }
          
          if($matches[0][1] == 0) {
            $value = str_replace($matches[0][0],"",$value);
          }
          
          $date = str_replace(",","",$date);
          if($regexp=="/c\. (\d)th millennium BC/i") {
            $date = 1000*$date;
          }
          // print_r("FOUND");
          $found = true;
          break;
        }
      }
    }
    
    $tag = "";
    
    if(!$found) {
      // print_r("NOT FOUND");
      if(isset($style["millennium"])) {
        $date = $style["millennium"]*1000;
      }
      else if(isset($style["century"])) {
        $date = $style["century"]*100;
      }
      else if(isset($style["year"])) {
        $date = $style["year"];
      }
      $pos = strpos($value, ":");
      if($pos!==false) {
        $value_arr = explode(":",$value);
        $tag = $value_arr[0];
        array_shift($value_arr);
        $value = implode(":",$value_arr);
      }
    }
    
    $seconds_in_a_year = 3.154*pow(10,7);
  
    // all is years
    $abbrevation = "ye";
    $tis = $seconds_in_a_year*$date*(-1);
  
    return array("title"=>$value,"time"=>$date,"abbrevation"=>$abbrevation,"tis"=>$tis,"time_found"=>$time_found,"tag"=>$tag,"month"=>$month,"day"=>$day);
}

function thoe_import_get_image($content) {
  $content = strip_tags($content);
  // first try wiki
  $wiki_url = 'https://en.wikipedia.org/w/api.php';
  $data = array(
      'action' => "query",
      'titles' => $content,
      'prop' => "pageimages",
      'format' => "json",
      'pithumbsize' => "500"
  );
  $source = "";
  $full_url = url($wiki_url, array('query' => $data));
  $wiki_result = drupal_http_request($full_url);
  $missing = true;
  if ($wiki_result->code==200) {
  	$data = json_decode($wiki_result->data);
  	if(isset($data->query->pages)) {
  	  $obj_attr = get_object_vars($data->query->pages);
  	  foreach ($obj_attr as $key=>$attr) {
  	    if(isset($attr->missing)) {
  	      break;
  	    }
  	    else if(isset($attr->thumbnail->source)) {
  	      $source = $attr->thumbnail->source;
  	      $missing = false;
  	    }
  	  }
  	}
  }
  
  // if wiki is not working, use google search: 
  if ($missing && $source=="") {
    $google_api_key = "AIzaSyBHBN9EvpOH2Cpbup_ktQNXAzj6-8qe0ZI";
    $cx = "018281177569452009831:a94jredrj7a";
    $end_url = "https://www.googleapis.com/customsearch/v1";
    $data = array(
    	"q" => urlencode($content),
      "num" => 1,
      "start" => 1,
      "imgSize" => "medium",
      "searchType" => "image",
      "filetype" => "jpg",
      "key" => $google_api_key,
      "cx" => $cx     
    );
    
    $full_url = url($end_url, array('query' => $data));
    $google_result = drupal_http_request($full_url);
//     print_r($google_result);
    if ($google_result->code==200) {
      $data = json_decode($google_result->data);
      $source = $data->items[0]->link;
    }
  }
  $result = ($source!=="") ? $source : false;
  return $result;
}

function thoe_import_add_video($data,$node) {
  foreach ($data["videos"] as $vid_id) {
//     drush_print($vid_id);
    $fid = db_query("select fid from {file_managed} where uri=:vid_id",
      array(':vid_id'=>"%".db_like($vid_id)))
      ->fetchField();
    
    if($fid) {
      $ref = db_query("select id from {file_usage}
        where fid=:fid and type='node' ",
        array(':fid'=>$fid))
        ->fetchField();
      
      $node->field_video_reference[$node->language][] = array(
          'target_id' => $ref,
          'target_type' => 'node',
      );
    }
    else {
      // create the video node first
      module_load_include('inc', 'media_youtube', 'includes/MediaInternetYouTubeHandler.inc');
      $url = "https://www.youtube.com/watch?v=" . $vid_id;
      $obj = new MediaInternetYouTubeHandler($url);
      $file = $obj->getFileObject();
      $file->display = 1;
      
      $incorrect_name = strpos($file->filename,"\x");
      
      if($file->filename=="" || $file->filename==" " || !isset($file->filename) || $incorrect_name == 0) {
        return $node;
      }
      file_save($file);
      
      $video_node = new stdClass();
      $video_node->title = $file->filename;
      $video_node->language = $node->language;
      $video_node->type = "video";
      node_object_prepare($video_node); 
      $video_node->uid = 1;
      $video_node->status = 1;
      $video_node->promote = 0;
      $video_node->comment = 0;
      
      $video_lang = thoe_import_lang_code('field_video',$node->language);
      
      $video_node->field_video[$video_lang][] = (array) $file;
      node_save($video_node);
      
      $video_lang = thoe_import_lang_code('field_video_reference',$node->language);
      // then reference the nid to our parent node
      $node->field_video_reference[$video_lang][] = array(
          'target_id' => $video_node->nid,
          'target_type' => 'node',
      );
    }
  	
  }
  return $node;
}

function thoe_import_add_books($data,$node) {
  if(count($data["books"])>0) {
    foreach ($data["books"] as $book) {
      foreach ($book->volumeInfo->industryIdentifiers as $isbn) {
        if($isbn->type=="ISBN_10") {
          $isbn_10 = $isbn->identifier;
        }
      }
      $bid = db_query("select entity_id from {field_data_field_isbn} where field_isbn_value=:isbn and entity_type = 'node'",
          array(':isbn'=>$isbn_10))
          ->fetchField();
    
      if($bid) {
        $node->field_video_reference[$node->language][] = array(
            'target_id' => $bid,
            'target_type' => 'node',
        );
      }
      else {
        // create the book node first
        $book_node = new stdClass();
        $book_node->title = $book->volumeInfo->title;
        $book_node->language = $node->language;
        if(isset($book->volumeInfo->subtitle)) {
          $book_node->title .= " " . $book->volumeInfo->subtitle;
        }
        
        $book_node->title = truncate_utf8(strip_tags($book_node->title ),255,true,false);
    
        $body_lang = thoe_import_lang_code('body',$node->language);
    
        $book_node->body[$body_lang][0]['value'] = $book->volumeInfo->description;
        $book_node->type = "book";
        node_object_prepare($book_node);
    
        $book_node->uid = 1;
        $book_node->status = 1;
        $book_node->promote = 0;
        $book_node->comment = 0;
    
        $isbn_lang = thoe_import_lang_code('field_isbn',$node->language);
    
        $book_node->field_isbn[$isbn_lang][]['value'] = $isbn_10;
    
        $publish_date_lang = thoe_import_lang_code('field_published_date',$node->language);
    
        drush_print("Book publish date: ". $book->volumeInfo->publishedDate);
        
        $time_string = strtotime($book->volumeInfo->publishedDate);
    
        if(is_int($time_string) && $time_string>0) {
          $book_node->field_published_date[$publish_date_lang][]['value'] = $time_string;
        }
    
        $url = $book->volumeInfo->imageLinks->smallThumbnail;
        $file_info = system_retrieve_file($url, 'public://pictures/', TRUE);
        if($file_info->fid){
          $img_lang = thoe_import_lang_code('field_image',$node->language);
          $book_node->field_image[$img_lang]['0']['fid'] = $file_info->fid;
        }
    
        node_save($book_node);
    
        // then reference the nid to our parent node
        $book_lang = thoe_import_lang_code('field_book',$node->language);
        $node->field_book[$book_lang][] = array(
            'target_id' => $book_node->nid,
            'target_type' => 'node',
        );
      }
       
    }
  }
  return $node;
}

function thoe_import_add_date($data,$node) {
  switch ($data["time"]["type"]) {
  	case "big_date":
  	  $ewrapper = entity_metadata_wrapper('node', $node);
  	  	
  	  // Create the collection entity and set it's "host".
  	  $collection = entity_create('field_collection_item', array('field_name' => 'field_big_date'));
  	  $collection->setHostEntity('node', $node);
  	  	
  	  // Now define the collection parameters.
  	  //   	  $cwrapper = entity_metadata_wrapper('field_collection_item', $collection);
  	  //   	  $cwrapper->field_years_ago->set($data["time"]);
  	  //   	  $cwrapper->field_abbrevation->set($data["abbrevation"]);
  	  //   	  $cwrapper->field_ago_after->set($data["ago_after"]);
  	  //   	  $cwrapper->save();
  
  	  foreach ($data["time"]["values"] as $time) {
  	    $years_lang = thoe_import_lang_code('field_years_ago',$node->language);
  	    $collection->field_years_ago[$years_lang][]['value'] = $time["time"];
  	    $collection->field_abbrevation[$years_lang][]['value'] = $time["abbrevation"];
  	    $collection->field_ago_after[$years_lang][]['value'] = $time["ago_after"];
  	    $collection->save();
  	  }
  	  	
  	  break;
  	   
  	case "normal":
  	  $ewrapper = entity_metadata_wrapper('node', $node);
  
  	  // Create the collection entity and set it's "host".
  	  $collection = entity_create('field_collection_item', array('field_name' => 'field_date'));
  	  $collection->setHostEntity('node', $node);
  
  	  	
  	  foreach ($data["time"]["values"] as $time) {
  	    $years_lang = thoe_import_lang_code('field_day',$node->language);
  	    if(isset($time["day"])) {
  	      $collection->field_day[$years_lang][]['value'] = $time["day"];
  	    }
  	    if(isset($time["month"])) {
  	      $collection->field_month[$years_lang][]['value'] = $time["month"];
  	    }
  	    if(isset($time["year"])) {
  	      $collection->field_year[$years_lang][]['value'] = $time["year"];
  	    }
  	    if(isset($time["ad_bc"])) {
  	      $collection->field_ad_bc[$years_lang][]['value'] = $time["ad_bc"];
  	    }
  	    if(isset($time["hour"])) {
  	      $collection->field_hour[$years_lang][]['value'] = $time["hour"];
  	    }
  	    if(isset($time["minute"])) {
  	      $collection->field_minute[$years_lang][]['value'] = $time["minute"];
  	    }
  	    if(isset($time["second"])) {
  	      $collection->field_second[$years_lang][]['value'] = $time["second"];
  	    }
  	    $collection->save();
  	  }
  
  	  break;
  }
  
  // Save.
  $ewrapper->save();
}

function thoe_import_add_extra_tag($extra_tag,$node,$vid=4) {
  $term_name = $extra_tag;
  // Create the term
  $term_object = new stdClass();
  $term_object->vid = $vid;
  $term_object->name = $term_name;
  //     if(isset($parent)) {
  //       $term_object->parent = $parent;
  //     }
  $possible_tid = _get_taxonomy_term_id_by_name($term_name);
  if(!$possible_tid) {
    taxonomy_term_save($term_object);
    $possible_tid = $term_object->tid;
  }
  
  // Get proper langcode
  $tag_info = field_info_field('field_free_tagging');
  if (field_is_translatable('node', $tag_info)) {
    $tag_lang = field_valid_language($node->language);
  } else {
    $tag_lang = LANGUAGE_NONE;
  }
  
  // set categories
  $node->field_free_tagging[$tag_lang][] = array('tid' => $possible_tid);
  return $node;
}

function thoe_import_add_tags($data,$node) {
  $vocab = $data["categories"];
  $terms = opencalais_thoe_hierarchical_terms($vocab);
  
  // Get proper langcode
  $tag_info = field_info_field('field_free_tagging');
  if (field_is_translatable('node', $tag_info)) {
    $tag_lang = field_valid_language($node->language);
  } else {
    $tag_lang = LANGUAGE_NONE;
  }
  
  // set categories
  foreach ($terms as $tid) {
    $node->field_free_tagging[$tag_lang][] = array('tid' => $tid);
  }
  return $node;
}

function thoe_import_add_image($data,$node) {
  $url = $data["image"];
  $file_info = system_retrieve_file($url, 'public://pictures/', TRUE);
  if($file_info->fid){
    $img_lang = thoe_import_lang_code('field_image',$node->language);
    $node->field_image[$img_lang]['0']['fid'] = $file_info->fid;//assign fid
  }
  return $node;
}

function thoe_import_add_test() {
  $node = new stdClass();
  $node->type = "node";
  $node->language = "en";
  node_object_prepare($node);
  $node->title = "Test".mktime();
  
  // Get proper langcode
  $body_field_info = field_info_field('body');
  if (field_is_translatable('node', $body_field_info)) {
    $body_language = field_valid_language($node_lang);
  } else {
    $body_language = LANGUAGE_NONE;
  }
  
  
  $node->body[$body_language][0]['value'] = "some text here but longer";
  $node->body[$body_language][0]['summary'] = text_summary("some text here but longer");
  $node->body[$body_language][0]['format'] = "full_html";
  $node->uid = 1;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;
  
  $tag_lang = thoe_import_lang_code('field_free_tagging',$node->language);
  
  dpm($tag_lang);
  $node->field_free_tagging[$tag_lang][]["tid"] = 18059;
  $node->field_free_tagging[$tag_lang][]["tid"] = 18060;
  node_save($node);
}

function thoe_import_lang_code($field_name,$lang) {
  // Get proper langcode
  $body_field_info = field_info_field($field_name);
  if (field_is_translatable('node', $body_field_info)) {
    $video_lang = field_valid_language($lang);
  } else {
    $video_lang = LANGUAGE_NONE;
  }
  return $video_lang;
}

function thoe_import_delete_all() {
  opencalais_thoe_delete_terms();
  $results = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->execute();
  foreach ($results as $result) {
    $nids[] = $result->nid;
  }
  
  if (!empty($nids)) {
    node_delete_multiple($nids);
    drupal_set_message(t('Deleted %count nodes.', array('%count' => count($nids))));
  }
  
  db_query("TRUNCATE TABLE {file_managed}");
}

function thoe_import_node_exists($title) {
  $nid = db_query("select nid from {node} where type='node' and title=:title",array(":title"=>$title))->fetchField();
  if($nid) {
    drush_print("node exists, passing...");
    return true;
  }
  else {
    return false;
  }
}

function thoe_import_delete_last($nid) {
  $results = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->condition('n.nid',$nid,'>')
  ->execute();
  foreach ($results as $result) {
    $nids[] = $result->nid;
  }

  if (!empty($nids)) {
    node_delete_multiple($nids);
    drupal_set_message(t('Deleted %count nodes.', array('%count' => count($nids))));
  }

}

function thoe_import_google_image_find_missing() {
  $imageless_nodes = thoe_import_imageless_nodes();
  
  foreach ($imageless_nodes as $nid) {
    $node = node_load($nid);
    $title = $node->title;
    $image_url = array("image"=>thoe_import_get_image($title));
    dpm($image_url["image"]);
    $node = thoe_import_add_image($image_url,$node);
    node_save($node);
  }
}

function thoe_import_imageless_nodes($node_type = "node") {
  $nodes = db_query("select n.nid from {field_revision_field_image} f
      right join {node} n on f.entity_id = n.nid
      where n.type = 'node'
      and f.entity_id is null");
  
  $empty_nodes = array();
  foreach ($nodes as $record) {
    $empty_nodes[] = $record->nid;
  }
  return $empty_nodes;
}

function thoe_import_edit_bigdate_tis() {
  $tisless_nodes = thoe_import_tisless_nodes();

  $big_bang = 13.8*pow(10,9);
  $seconds_in_a_year = 3.154*pow(10,7);
  
  $big_bang_seconds = 435252000000000000;
  
  foreach ($tisless_nodes as $nid) {
    $node = node_load($nid);
    $years_lang = thoe_import_lang_code('field_years_ago',$node->language);
    
    $entity = entity_load('field_collection_item', array($node->field_big_date[$years_lang][0]['value']));
    
    $time = $entity[$node->field_big_date[$years_lang][0]['value']]->field_years_ago['und'][0]['value'];
    $abbrevation = $entity[$node->field_big_date[$years_lang][0]['value']]->field_abbrevation['und'][0]['value'];
    
    switch ($abbrevation) {
    	case "zero":
      	$tis = $big_bang*$seconds_in_a_year*(-1);
      	break;
    	case "neg":
    	  $tis = $big_bang*$seconds_in_a_year*(-1);
    	  break;
  	  case "sec":
  	    $tis = $time - $big_bang_seconds;
  	    break;
	    case "min":
	      $tis = $time*60 - $big_bang_seconds;
	      break;
      case "hr":
        $tis = $time*60 - $big_bang_seconds;
        break;
      case "ye":
        $tis = $time*$seconds_in_a_year - $big_bang_seconds;
        break;
      case "ka":
        $tis = $time*$seconds_in_a_year*1000 - $big_bang_seconds;
        break;
      case "ma":
        $tis = $time*$seconds_in_a_year*1000000 - $big_bang_seconds;
        break;
      case "ga":
        $tis = $time*$seconds_in_a_year*1000000000 - $big_bang_seconds;
        break;
    }
    $node->field_tis[$years_lang][0]['value'] = $tis;
    dpm($tis);
    node_save($node);
  }
}

function thoe_import_tisless_nodes($node_type = "node") {
  $nodes = db_query("select n.nid from {node} n
      where n.type = 'node'
      ");

  $empty_nodes = array();
  foreach ($nodes as $record) {
    $empty_nodes[] = $record->nid;
  }
  return $empty_nodes;
}

function thoe_import_recalculate_weight($nodes = "") {
  if($nodes=="") {
    $nodes = db_query('SELECT nid FROM {node} WHERE type =  :type', array(
    ':type' => 'node',
    ))->fetchCol();
  }
  
  foreach ($nodes as $nid) {
  	$node = node_load($nid);
  	$num_of_terms = count($node->field_free_tagging['und']);
  	$node->field_weight["und"][0]["value"] = $num_of_terms;
  	node_save($node);
  }
}

function thoe_import_renew_images($nodes="") {
  if($nodes=="") {
    $nodes = db_query('SELECT nid FROM {node} WHERE type =  :type', array(
        ':type' => 'node',
    ))->fetchCol();
  }
  
  foreach ($nodes as $nid) {
    $node = node_load($nid);
    $field = $node->field_image;
    if(count($field)==0) {
      $image_url = thoe_import_get_image($node->title);
      $data["image"] = $image_url;
      $node = thoe_import_add_image($data,$node);
      print $node->nid;
      node_save($node);
    }
    
  }
}






















